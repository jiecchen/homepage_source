<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cn | Mind Recorder]]></title>
  <link href="http://xmerge.me/blog/categories/cn/atom.xml" rel="self"/>
  <link href="http://xmerge.me/"/>
  <updated>2015-11-03T15:17:15-05:00</updated>
  <id>http://xmerge.me/</id>
  <author>
    <name><![CDATA[xmerge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mathematica Programming-An Advanced Introduction]]></title>
    <link href="http://xmerge.me/blog/2014/08/19/mma-advanced/"/>
    <updated>2014-08-19T17:57:53-04:00</updated>
    <id>http://xmerge.me/blog/2014/08/19/mma-advanced</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mathematica-" id="markdown-toc-mathematica-">Mathematica 编程：高级导论</a>    <ul>
      <li><a href="#section" id="markdown-toc-section">序言</a></li>
      <li><a href="#section-1" id="markdown-toc-section-1">简介</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">基本操作</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">表</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">规则, 模式和函数</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">表处理函数与函数式编程</a>        <ul>
          <li><a href="#section-6" id="markdown-toc-section-6">介绍</a></li>
          <li><a href="#section-7" id="markdown-toc-section-7">核心高阶函数</a>            <ul>
              <li><a href="#section-8" id="markdown-toc-section-8">介绍</a></li>
            </ul>
          </li>
          <li><a href="#map-" id="markdown-toc-map-"><code>Map</code> 的最简单形式</a>            <ul>
              <li><a href="#section-9" id="markdown-toc-section-9">简单的例子</a></li>
              <li><a href="#map-fp-" id="markdown-toc-map-fp-"><code>Map</code>是 FP 版本的循环</a></li>
              <li><a href="#map--" id="markdown-toc-map--"><code>Map</code> 中使用 <code>纯函数</code></a></li>
              <li><a href="#section-10" id="markdown-toc-section-10">符号表示 和 优先级</a></li>
              <li><a href="#section-11" id="markdown-toc-section-11">结合性</a></li>
              <li><a href="#section-12" id="markdown-toc-section-12">更多例子</a></li>
              <li><a href="#section-13" id="markdown-toc-section-13">多元函数, 除一个参数外其余所有被固定</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#section-14" id="markdown-toc-section-14">编写高效程序: 技巧和应用</a></li>
      <li><a href="#section-15" id="markdown-toc-section-15">附录</a></li>
    </ul>
  </li>
</ul>

<h1 id="mathematica-">Mathematica 编程：高级导论</h1>
<p>本书的英文版 <a href="http://www.mathprogramming-intro.org/">Mathematica programming: an advanced introduction</a>, by Leonid Shifrin</p>

<h2 id="section">序言</h2>

<h2 id="section-1">简介</h2>

<h2 id="section-2">基本操作</h2>

<h2 id="section-3">表</h2>

<h2 id="section-4">规则, 模式和函数</h2>

<h2 id="section-5">表处理函数与函数式编程</h2>

<h3 id="section-6">介绍</h3>
<p>所谓的”函数式编程”, 是这样一种编程范式: 扮演核心角色的, 是函数对数据或者其他函数的作用. 函数本身也被当作是数据的一种, 从而可以作为其他函数的额参被使用. 考虑到任意的数据结构都可以利用<code>表</code>来构造, 所以函数式编程的主要内容就是关于函数对<code>表</code>的作用.</p>

<p><code>Mathematica</code> 中的函数式编程, 和其他的一些语言(比如 lisp) 中的函数式编程有一些显著的区别. 比如说, <code>表</code>的递归表示, 在<code>Mathematica</code> 中并如其他函数式语言中的表那么高效, 因为本质上, <code>Mathematica</code> 的<code>表</code>是用链表来实现的. 另一个重要的区别, 则是由<code>Mathematica</code>的<code>规则</code>导致的, 要看到这一点, 请读者回忆,<code>Mathematica</code> 中的函数定义实际上是基于模式匹配规则替换的, 而计算过程本身由是全局<code>规则库</code>所控制的表达式重写的过程.</p>

<p>除了简约紧凑,函数式编程的风格同常还是在<code>Mathematica</code>中最高效的表达方式. 此外, 尽管我们不会在本章论及, 但还是值得在这里让读者知道, 函数式的技巧不仅可以作用到<code>表</code>上,还可以作用到一般的表达式中. 随着理解的深入, 读者将会看到这是一个强有力的语言特性.</p>

<p>简单地说一下本章所扮演的角色. 毫不夸张地说, 本章是本书所有章节中最核心的一章, 这是因为, 本章介绍了新的编程风格和信条, 而这种风格和信条不单单在我们此后的内容里反复出现,它实际上帮助将你的<code>Mathematica</code>编程水平提升到一个新的档次 – 不仅仅是技巧上的, 而是改变整个思考问题的方式. 那些原本就熟悉函数式编程的读者, 会发现本章的很多内容早已了然于胸, 但是即使他们, 也将会发现本章中有很多专属于<code>Mathematica</code>的新的知识, 而这些只是是对想写出高效<code>Mathematica</code>程序的人必不可少的.</p>

<p>在这一章节中, 例子扮演了帮助理解材料的核心角色. 他们中的很多是用来演示一些基本的概念或微妙的细节的, 因为我坚信, 让人们更好地理解新想法的最好的方式, 就是举一些例子说明. 要完全理解这一章节, 读者最好尝试思考理解每一个例子, 当有注释存在的时候, 读者还需要特别留心. 此外有些例子确实看起来有些”故意为之”的感觉. 这是因为我们主要的目的是为了用最简单的方式演示语言的一些习惯用法.</p>

<h3 id="section-7">核心高阶函数</h3>

<h4 id="section-8">介绍</h4>
<p>简单地说, <code>Mathematica</code>函数式编程(FP)指的是讲函数作用到<code>Mathematica</code>通常的表达式上. 一个重要的特例就是当被作用的表达式为列表(也就是说 <code>Head</code>为<code>List</code>), 在这一章中, 这其实也是我们主要的考察对象. 然而需要指出的是, 大多书关于<code>表</code>的函数式操作, 都可以平移到普通的表达式上.</p>

<p>有两个给予 FP 强大的表现力的关键:</p>

<ol>
  <li>
    <p>函数可以把其他函数当作参数并在运行时以函数为返回值 (在 C 中我们也有函数指针). 返回的函数可以是纯粹意义上的函数, 也可以是带<code>模式</code>的函数. 后者在过程式语言中很难找到类比, 因为过程式语言中函数的定义通常在编译时就决定了.</p>
  </li>
  <li>
    <p><code>表</code>的组成元素可以是任意的表达式,可以是原子类型(例如数字, 字符串 或者符号), 也可以是通常的表达式. 特别的, 读者可以考察嵌套(<code>nested</code>) 的<code>表</code>, 它们可以被用来表示各式各样的数据结构. 这也意味着看似简单的<code>表</code>可以包含极其丰富的类型.</p>
  </li>
</ol>

<p>我在这里稍微描述一下几个特定的函数式风格的特点, 以让读者能对它有大致的感受. 第一, <em>副作用</em> (例如变量的赋值) 在函数式风格中几乎看不见. 第二, 函数式风格中极少出现循环的使用. 当然对于后一点, <code>Mathematica</code>明令禁止, 只是我们很快就会看到, 我们有其他更自然的构造方式.</p>

<p>以其他函数作为参数的函数, 我们叫做<code>高阶函数</code>. 在概念上, 有两个特别重要的高阶函数, <code>Map</code> 和 <code>Apply</code>. 在实践上, 这两个函数通常也是被最频繁使用的函数, 但是有一些不那么底层的操作也是非常有用的, 所以 <code>Mathematica</code> 也包含了其他的一些简单而有用的高阶函数.</p>

<p>现在让我们来看一看一些最常用的内置的高阶函数吧, 我会用一些例子说明他们的用法. 因为这些函数是如此地基本和有用, 读者仅仅依靠他们就可以作出很多有意义的操作.</p>

<h3 id="map-"><code>Map</code> 的最简单形式</h3>
<p>作为两个”最基本”的内置高阶函数, <code>Map</code> 也可能是目前为止最常用的一个. 粗略地说, <code>Map</code> 就是 FP 版本的循环.</p>

<p>在它的最简单的形式中, <code>Map</code> 使用两个参数: 一个单变量函数 (让我们记作 <code>f</code> ) 以及一个可以被<code>f</code> <em>map</em> 的表达式 <code>expr</code>. 如果 <code>expr</code> 是原子类型,那么它将被直接返回. 如果 <code>expr</code> 是一个<code>表</code> (或者是一个普通的表达式), 那么 <code>f</code> 被作用到它的每个元素上, 返回的结果是一个被作用后元素的表.</p>

<h4 id="section-9">简单的例子</h4>
<p>一些简单的例子:</p>

<pre><code>Clear[f];
Map[f, a]
</code></pre>

<p>$a$</p>

<pre><code>Map[f, {a, b, c}]
</code></pre>
<p>$\{f[a], f[b], f[c]\}$</p>

<p>上面的例子中,我们并没有给予 <code>f</code> 具体的定义, 让我们作如下定义:</p>

<pre><code>f[x_] := x^2
</code></pre>

<p>现在我们有</p>

<pre><code>Map[f, {a, b, c}]
</code></pre>
<p>$\{a^2, b^2, c^2\}$</p>

<pre><code>Map[f, a]
</code></pre>
<p>$a$</p>

<h4 id="map-fp-"><code>Map</code>是 FP 版本的循环</h4>
<p>现在我们看看<code>Map</code>如何取代循环: 在”过程式”版本中, 我们有形如下面的代码:</p>

<pre><code>Module[{i, len, expr, newexpr},
	For[i = 1; expr = {a, b, c};
		len = Length[expr]; newexpr = Table[0, {len}],
		i &lt;= len, i++, newexpr[[i]] = f[expr[[i]]];
	newexpr]
</code></pre>
<p>$\{a^2, b^2, c^2\}$</p>

<p>请读者注意, 我小心地用 <code>Module</code> 包裹我的代码, 以避免产生全局性的副作用.</p>

<p>所以显而易见的, 我们可以看到 <code>Map</code> 的以下几点好处:</p>

<ol>
  <li>无需引入辅助变量.</li>
  <li>无需事先知道<code>表</code>的长度.</li>
  <li>代码更加紧凑.</li>
  <li>在多数情况下我们的代码会更快 (当然, 这并不是显然的).</li>
</ol>

<p>实际执行过程中, <code>表</code> 的一个副本会被创建, 而所有的操作都只针对副本, 因此 原始的 <code>表</code> 的状态并不会改变.</p>

<h4 id="map--"><code>Map</code> 中使用 <code>纯函数</code></h4>
<p>我们重写上一个代码, 来演示如何在 <code>Map</code> 中使用 <code>纯函数</code>:</p>

<pre><code>Map[#^2 &amp;, {a, b, c}]
</code></pre>
<p>$\{a^2, b^2, c^2\}$</p>

<p>在这个例子中, 我们连函数名都可以省略掉. 此外, 纯函数 (尤其是当和 <code>Map</code> 配合使用时) 通常比基于 <code>模式</code> 定义的函数更加高效, 因为连模式匹配的过程也省了. 但另一方面, 这也意味着对于无效的输入, 我们很难提供有效的保护措施, 这一点我们在之前的内容中也提到过.</p>

<h4 id="section-10">符号表示 和 优先级</h4>
<p>和许多操作一样, 对 <code>Map</code> 我们有简单的符号表示 - 符号 <code>/@</code> (slash-at). 用法遵循 <code>(function /@ expression)</code> 这样的形式. 例如:</p>

<pre><code>(f /@ {a, b, c})
</code></pre>
<p>$\{a^2, b^2, c^2\}$</p>

<pre><code>(#^2&amp; /@ {a, b, c})
</code></pre>
<p>$\{a^2, b^2, c^2\}$</p>

<p>然而通常我们需要注意跟符号优先级相关的陷阱. 例如下面的例子: 我们想先把 <code>f</code> map 到给定的表上, 然后再对得到的表作平方操作. 我们希望能得到 $\{a^4, b^4, c^4\}$, 但实际上:</p>

<pre><code>#^2&amp; @ f /@ {a, b, c} 
</code></pre>
<p>$\{f^2[a], f^2[b], f^2[c]\}$</p>

<p>可以看到, 实际的执行过程是, 符号 <code>f</code> 被平方了, 然后整体地被 map 到了表上. 现在:</p>

<pre><code>#^2&amp; @ ( f /@ {a, b, c} )
</code></pre>
<p>$\{a^4, b^4, c^4\}$</p>

<p>如果我们老老实实地使用 <code>Map</code> 函数名的话, 这一类问题几乎是不会出现的:</p>

<pre><code>#^2&amp; @ Map[f, {a, b, c}]
</code></pre>
<p>$\{a^4, b^4, c^4\}$</p>

<p>此外, 原原本本地使用 <code>Map</code> 还有助于提高程序的可读性. 所以我的建议是, 读者还不到对简写符号的烂熟于心时候, 不要轻易去使用他们. 但是不得不承认, <code>/@</code> 在实践上确实比 <code>Map</code> 方便很多.</p>

<h4 id="section-11">结合性</h4>
<p><code>Map</code> 操作是<em>右结合</em> (right-associative) 的, 这意味着我们可以在下面的例子中省略括号:</p>

<pre><code>g /@ g /@ {a, b, c}
</code></pre>
<p>$\{ g[g[a]], g[g[b]], g[g[c]]\}$</p>

<pre><code>f /@ f /@ {a, b, c}
</code></pre>
<p>$\{a^4, b^4, c^4\}$</p>

<h4 id="section-12">更多例子</h4>
<p>让我们现在考虑一些有趣的例子.
下面的例子帮助我们创建深度为 $2$ 的表:</p>

<pre><code>Map[Range, Range[4]]
</code></pre>

<p>$\{ \{1\}, \{ 1, 2 \}, \{1, 2, 3\} , \{1, 2, 3, 4\} \}$</p>

<p>或者等价的</p>

<pre><code>Range /@ Range[4]
</code></pre>

<p>$\{ \{1\}, \{ 1, 2 \}, \{1, 2, 3\} , \{1, 2, 3, 4\} \}$</p>

<p>下面的例子接收一个表组成的表, 返回一个包含每个内部的表的首元素的表:</p>

<pre><code>Map[First, { {a, b}, {c, d}, {e, f}, {g, h} }]
</code></pre>
<p>$\{a, c, e, g\}$</p>

<p>以及这个例子:</p>

<pre><code>Map[Subsets, { {a, b, c}, {d, e} }]
</code></pre>
<p>$\{ \{\{\}, \{a\}, \{b\}, \{c\}, \{a, b\}, \{a, c\}, \{b, c\}, \{a, b, c\} \},
\{ \{\}, \{d\}, \{e\}, \{d, e\} \} \}$</p>

<p>读者可以从前面的一系列例子中注意到, 那些需要循环的例子往往是用 <code>Map</code> 来实现的. 这本身并没有什么美妙的地方 - 真正美妙的地方在于, 既然我们在 <code>Map</code> 不需要变量和赋值, 那么我们也根本不需要担心它们. 比如说, 我们根本就不再需要作数组下标是否越界的检查. 另一个额外的好处是, <code>Map</code> 对表的操纵是整体性的, 它如何操纵表内的元素由它的内部实现去考虑, 相反的, 过程式地操纵表, 我们则需要”手动”地依次处理每个元素 - 这无疑将会是比较低效的, 这一点我们在之前就已经指出.</p>

<h4 id="section-13">多元函数, 除一个参数外其余所有被固定</h4>
<p>让我们考虑另外一种情况: 现在我们想 map 一个多元函数, 此函数除一个参数外其余所有参数都被固定. 例如:</p>

<pre><code>Clear[f, a];
f[x_, y_] := Sin[x + y];
</code></pre>

<p>我们想在固定 $y$ 的情形下把它 map 到表 $\{1, 2, 3, 4, 5 \}$. 也许最好的解决方案是利用内置函数 <code>Thread</code>. 但出于举例说明的目的, 我们看看能不能用 <code>Map</code> 做到这一点. 我们会在某个时候返回这个问题, 并用 <code>Thread</code> 给出解决方案.</p>

<p>一种选择是, 定义一个辅助函数 <code>g</code>:</p>

<pre><code>Clear[g];
g[x_] := f[x, a];
</code></pre>

<p>现在:</p>

<pre><code>Map[g, Range[5]]
</code></pre>

<p>$\{ Sin[1+a], Sin[2+a], Sin[3+a], Sin[4+a], Sin[5+a] \}$</p>

<p>如果我们仅仅只是要解决这个问题, 专门定义一个 <code>g</code> 未免太浪费了, 因为我们无非之用了一次而已. 如果我们要多次使用 <code>g</code>, 一个潜在的危险是, 我们使用了一个全局的 <code>a</code> ( 考虑到 <code>a</code> 可能会在不同的地方被修改, 我们的程序将会出现非常隐蔽的错误 ). 这样一来, 使用纯函数应当会是一个更好的方案.</p>

<pre><code>Map[f[#, a]&amp;, Range[5]]
</code></pre>
<p>$\{ Sin[1+a], Sin[2+a], Sin[3+a], Sin[4+a], Sin[5+a] \}$</p>

<h2 id="section-14">编写高效程序: 技巧和应用</h2>

<h2 id="section-15">附录</h2>
]]></content>
  </entry>
  
</feed>
